{"version":3,"sources":["components/TableHeader/TableHeader.tsx","components/TodoItem/TodoItem.tsx","utils/storage.ts","components/TodoList/TodoList.tsx","load/todos.ts","App.tsx","index.tsx"],"names":["TableHeader","values","map","value","i","TodoItem","todos","onSelected","onUpdate","todo","onClick","onKeyDown","id","title","description","htmlFor","className","type","checked","completed","onChange","client","get","JSON","parse","localStorage","getItem","post","data","setItem","stringify","patch","newData","newTodos","TodoList","useState","setTodos","isSelected","setIsSelected","setTitle","setDescription","noTitle","setNoTitle","noDescription","setNoDescription","hasTitle","trim","hasDescription","loadTodos","useEffect","onSubmit","event","preventDefault","maxID","Math","max","placeholder","classNames","target","rows","updateOne","aria-label","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a23311f7.chunk.js","sourcesContent":["import React from 'react';\n\ntype Props = {\n  values: string[];\n};\n\nexport const TableHeader: React.FC<Props> = ({ values }) => {\n  return (\n    <thead>\n      <tr>\n        {values.map((value: string, i: number) => (\n          // Array index as key is used here because the array is not subject to change\n          // eslint-disable-next-line react/no-array-index-key\n          <th key={i}>{value}</th>\n        ))}\n      </tr>\n    </thead>\n  );\n};\n","/* eslint-disable jsx-a11y/no-noninteractive-element-interactions */\nimport React from 'react';\nimport { Todo } from '../types/Todo';\n\ntype Props = {\n  todos: Todo[];\n  onSelected: (todo: Todo) => void | null;\n  onUpdate: (todo: Todo) => void;\n};\n\nexport const TodoItem: React.FC<Props> = ({\n  todos,\n  onSelected,\n  onUpdate,\n}) => {\n  return (\n    <tbody>\n      {todos.map((todo: Todo) => (\n        <tr key={todo.id}>\n          <td\n            onClick={() => onSelected(todo)}\n            onKeyDown={() => onSelected(todo)}\n          >\n            {todo.id}\n          </td>\n          <td\n            onClick={() => onSelected(todo)}\n            onKeyDown={() => onSelected(todo)}\n          >\n            {todo.title}\n          </td>\n          <td\n            onClick={() => onSelected(todo)}\n            onKeyDown={() => onSelected(todo)}\n          >\n            {todo.description}\n          </td>\n          <td>\n            <label htmlFor=\"status\" className=\"checkbox\">\n              <input\n                id=\"status\"\n                type=\"checkbox\"\n                checked={todo.completed}\n                onChange={() => onUpdate(todo)}\n              />\n            </label>\n          </td>\n        </tr>\n      ))}\n    </tbody>\n  );\n};\n","import { Todo } from '../components/types/Todo';\n\nexport const client = {\n  get: () => JSON.parse(localStorage.getItem('todos') || '[]'),\n  post: (data: Todo) => {\n    const todos: Todo[] = client.get();\n\n    localStorage.setItem('todos', JSON.stringify([...todos, data]));\n  },\n  patch: (id: number, newData: Omit<Todo, 'id' | 'title' | 'description'>) => {\n    const todos: Todo[] | [] = client.get();\n\n    const newTodos: Todo[] = todos.map((todo: Todo) => {\n      if (todo.id === id) {\n        const changedTodo: Todo = {\n          ...todo,\n          completed: newData.completed,\n        };\n\n        return changedTodo;\n      }\n\n      return todo;\n    });\n\n    localStorage.setItem('todos', JSON.stringify(newTodos));\n  },\n};\n","import React, { useState, useEffect } from 'react';\nimport classNames from 'classnames';\nimport { TableHeader } from '../TableHeader';\nimport { TodoItem } from '../TodoItem';\nimport { getAll, updateOne, addOne } from '../../load/todos';\nimport { Todo } from '../types/Todo';\n\nexport const TodoList: React.FC = () => {\n  const tableHeaderValues: string[] = ['ID', 'TITLE', 'DESCRIPTION', 'STATUS'];\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [isSelected, setIsSelected] = useState<Todo | null>(null);\n  const [title, setTitle] = useState<string>('');\n  const [description, setDescription] = useState<string>('');\n  const [noTitle, setNoTitle] = useState<boolean>(false);\n  const [noDescription, setNoDescription] = useState<boolean>(false);\n  const hasTitle = title.trim() !== '';\n  const hasDescription = description.trim() !== '';\n\n  const loadTodos = () => {\n    setTodos(getAll());\n  };\n\n  const handleTitleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setTitle(event.target.value);\n    setNoTitle(false);\n  };\n\n  const handleDescriptionChange = (event: React.ChangeEvent<HTMLTextAreaElement>) => {\n    setDescription(event.target.value);\n    setNoDescription(false);\n  };\n\n  const resetForm = () => {\n    setTitle('');\n    setDescription('');\n  };\n\n  const handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    if (!hasTitle) {\n      setNoTitle(true);\n\n      return;\n    }\n\n    if (!hasDescription) {\n      setNoDescription(true);\n\n      return;\n    }\n\n    const maxID = Math.max(...todos.map(todo => todo.id));\n\n    const newTodo: Todo = {\n      id: maxID > 0 ? (maxID + 1) : 1,\n      title,\n      description,\n      completed: false,\n    };\n\n    addOne(newTodo);\n    resetForm();\n    loadTodos();\n  };\n\n  const handleUpdate = (todo: Todo | null) => {\n    if (todo === null) {\n      return;\n    }\n\n    const { id, completed } = todo;\n\n    updateOne(id, {\n      completed: !completed,\n    });\n\n    loadTodos();\n  };\n\n  useEffect(() => {\n    loadTodos();\n  }, []);\n\n  return (\n    <div className=\"container\">\n      <div className=\"container mt-6 mb-6\">\n        <form onSubmit={handleSubmit}>\n          <label htmlFor=\"title\" className=\"label\">\n            Title:\n            <input\n              id=\"title\"\n              type=\"text\"\n              placeholder=\"Todo title\"\n              className={classNames('input title-text mt-2', {\n                'is-danger': noTitle,\n              })}\n              value={title}\n              onChange={handleTitleChange}\n            />\n          </label>\n          {noTitle && (\n            <p className=\"help is-danger\">This field is empty</p>\n          )}\n\n          <label htmlFor=\"description\" className=\"label mt-3\">\n            Description:\n            <textarea\n              id=\"description\"\n              placeholder=\"Todo description\"\n              rows={5}\n              className={classNames('textarea description-text mt-2', {\n                'is-danger': noDescription,\n              })}\n              value={description}\n              onChange={handleDescriptionChange}\n            />\n          </label>\n          {noDescription && (\n            <p className=\"help is-danger\">This field is empty</p>\n          )}\n\n          <button\n            type=\"submit\"\n            className=\"button is-success is-outlined button__create mt-3\"\n          >\n            Create\n          </button>\n        </form>\n      </div>\n\n      <div className=\"container\">\n        <table className=\"table is-hoverable is-narrow is-fullwidth\">\n          <TableHeader values={tableHeaderValues} />\n\n          <TodoItem\n            todos={todos}\n            onSelected={setIsSelected}\n            onUpdate={handleUpdate}\n          />\n        </table>\n\n        <div className={classNames('modal', {\n          'is-active': isSelected !== null,\n        })}\n        >\n          <div className=\"modal-background\"></div>\n          <div className=\"modal-card\">\n            <header className=\"modal-card-head\">\n              <p className=\"modal-card-head title is-3\">\n                {isSelected?.title}\n              </p>\n            </header>\n            <section className=\"modal-card-body has-text-justified\">\n              <h5 className=\"title is-5 mb-3\">Description:</h5>\n              <p className=\"mb-5\">{isSelected?.description}</p>\n              <label htmlFor=\"modal-status\" className=\"checkbox title is-6\">\n                Status:\n                <br></br>\n                <input\n                  id=\"modal-status\"\n                  type=\"checkbox\"\n                  checked={isSelected?.completed}\n                />\n              </label>\n            </section>\n            <button\n              type=\"button\"\n              className=\"button is-warning\"\n              aria-label=\"close\"\n              onClick={() => setIsSelected(null)}\n            >\n              Close\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n","import { Todo } from '../components/types/Todo';\nimport { client } from '../utils/storage';\n\nexport function getAll() {\n  return client.get();\n}\n\nexport function addOne(data: Todo) {\n  return client.post(data);\n}\n\nexport function updateOne(id: number, newData: Omit<Todo, 'id' | 'title' | 'description'>) {\n  return client.patch(id, newData);\n}\n","import React from 'react';\nimport './App.scss';\nimport { TodoList } from './components/TodoList';\n\nexport const App: React.FC = () => {\n  return (\n    <main className=\"container is-clipped\">\n      <TodoList />\n    </main>\n  );\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport { App } from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}